
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.EmployeesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  role: 'role',
  salary: 'salary'
};

exports.Prisma.GuildScalarFieldEnum = {
  treasury: 'treasury',
  guild_id: 'guild_id',
  guild_name: 'guild_name'
};

exports.Prisma.MemberScalarFieldEnum = {
  member_id: 'member_id',
  name: 'name',
  class: 'class',
  rank: 'rank',
  mission_id: 'mission_id'
};

exports.Prisma.QuestsScalarFieldEnum = {
  mission_id: 'mission_id',
  title: 'title',
  details: 'details',
  difficulty: 'difficulty',
  reward: 'reward',
  Start_Date: 'Start_Date',
  Completion_Date: 'Completion_Date'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.employeesOrderByRelevanceFieldEnum = {
  name: 'name',
  role: 'role'
};

exports.Prisma.guildOrderByRelevanceFieldEnum = {
  guild_name: 'guild_name'
};

exports.Prisma.memberOrderByRelevanceFieldEnum = {
  name: 'name',
  class: 'class',
  rank: 'rank'
};

exports.Prisma.questsOrderByRelevanceFieldEnum = {
  title: 'title',
  details: 'details',
  difficulty: 'difficulty'
};


exports.Prisma.ModelName = {
  employees: 'employees',
  guild: 'guild',
  member: 'member',
  quests: 'quests'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\Alexander\\Desktop\\Repos\\eternaldb-api\\src\\prisma\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\Alexander\\Desktop\\Repos\\eternaldb-api\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.2",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "mysql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n  output   = \"../src/prisma/client\"\n}\n\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments\nmodel employees {\n  id     Int     @id @default(autoincrement())\n  name   String? @db.VarChar(255)\n  role   String? @db.VarChar(255)\n  salary Int?\n}\n\n/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments\nmodel guild {\n  treasury   BigInt?\n  guild_id   Int     @id @default(autoincrement())\n  guild_name String? @db.Text\n}\n\n/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments\nmodel member {\n  member_id  Int     @id @default(autoincrement())\n  name       String? @db.VarChar(255)\n  class      String? @db.VarChar(255)\n  rank       String? @db.VarChar(255)\n  mission_id Int?\n  quests     quests? @relation(fields: [mission_id], references: [mission_id], onDelete: NoAction, onUpdate: SetDefault, map: \"member_ibfk_1\")\n\n  @@index([mission_id], map: \"mission_id\")\n}\n\nmodel quests {\n  mission_id      Int       @id @default(autoincrement())\n  title           String?   @db.Text\n  details         String?   @db.Text\n  difficulty      String?   @db.VarChar(2)\n  reward          Int?\n  Start_Date      DateTime? @db.Date\n  Completion_Date DateTime? @db.Date\n  member          member[]\n}\n",
  "inlineSchemaHash": "8ff2d96b7ad2d16b31c4bbdba6ec8e6ba1c0599d7ce659e8daef6dc48384292c",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"employees\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"salary\",\"kind\":\"scalar\",\"type\":\"Int\"}],\"dbName\":null},\"guild\":{\"fields\":[{\"name\":\"treasury\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"guild_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"guild_name\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"member\":{\"fields\":[{\"name\":\"member_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"class\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rank\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"mission_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"quests\",\"kind\":\"object\",\"type\":\"quests\",\"relationName\":\"memberToquests\"}],\"dbName\":null},\"quests\":{\"fields\":[{\"name\":\"mission_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"details\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"difficulty\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"reward\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"Start_Date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"Completion_Date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"member\",\"kind\":\"object\",\"type\":\"member\",\"relationName\":\"memberToquests\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

